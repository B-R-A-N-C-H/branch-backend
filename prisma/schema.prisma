// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TEACHER
  HEAD_TEACHER
  PRINCIPAL
  ADMIN
}

model Member {
  id       String @id @default(cuid())
  email    String @unique
  password String

  teachingLevel Int? // If they are a teacher (1,2,3)
  role          Role?

  firstName String
  lastName  String

  children            Student[]
  registrationEntries RegistrationEntry[]

  announcementsMade    Announcement[]
  announcementComments AnnouncementComment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegistrationPeriod {
  id   String @id @default(cuid())
  name String

  starts DateTime
  ends   DateTime

  entries RegistrationEntry[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegistrationEntry {
  id       String   @id @default(cuid())
  approved Boolean? // If the field is null the entry hasn't been reviewed yet.

  by       Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId String

  gradeLevel       Int
  childFirstName   String
  childLastName    String
  childDateOfBirth DateTime

  streetName String
  city       String
  parish     String

  emergencyContactNumber           String
  secondaryEmergencyConctactNumber String

  for                  RegistrationPeriod @relation(fields: [registrationPeriodId], references: [id], onDelete: Cascade)
  registrationPeriodId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RegistrationDocument {
  id   String @id @default(cuid())
  name String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Student {
  id String @id @default(cuid())

  firstName  String
  lastName   String
  gradeLevel String

  streetName                      String
  city                            String
  parish                          String
  emergencyContactNumber          String
  secondaryEmergencyContactNumber String

  parentId String
  parent   Member @relation(fields: [parentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum AnnouncementLevel {
  GLOBAL
  ONE
  TWO
  THREE
}

model Announcement {
  id      String            @id @default(cuid())
  level   AnnouncementLevel @default(GLOBAL)
  content String

  commentsEnabled Boolean               @default(true)
  comments        AnnouncementComment[]

  announcerId String
  announcer   Member @relation(fields: [announcerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AnnouncementComment {
  id String @id @default(cuid())

  parentCommentId String?
  parentComment   AnnouncementComment?  @relation("Comments", fields: [parentCommentId], references: [id], onDelete: Cascade)
  childComments   AnnouncementComment[] @relation("Comments")

  announcementId String
  announcement   Announcement @relation(fields: [announcementId], references: [id], onDelete: Cascade)

  commenterId String
  commenter   Member @relation(fields: [commenterId], references: [id])

  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id   String @id @default(cuid())
  name String

  starts DateTime
  ends   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
